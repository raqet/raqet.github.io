{"name":"Raqet, Remote Acquisition and Triage","tagline":"","body":"### Welcome to the Raqet project.\r\n\r\nThis website documents the Remote Acquisition and Triage tool. This tool allows to triage a disk of a remote computer (client) that is restarted with a purposely built forensic operating system. While performing this investigation a server side sparse evidence file is written. This work process is against most forensic best practices that are documented as most describe investigation starts by making a forensic copy of the full disk.\r\n\r\nThe Raqet project deliberately breaks with this practice. It is the authors opinion that current disk sizes do no longer make it practical nor proportional to always make a full bit-copy. E.g. to save the forensic relevant data of a hacked web server one could argue that the web server log files are sufficient. Especially as most of the web server content is actually from the victim and not from the attacker. \r\n\r\n![Flow of Information](images/FlowOfInformation.png)\r\n\r\nThe picture above describes the flow of information that is implemented in this project. The computer that is investigated is positioned on the left, the server is on the right. It is booted using a custom os, the [client](https://github.com/raqet/acquisition-client) that will connect over an IP-VPN to the [server](https://github.com/raqet/acquisition-server). The client-side os is generated with unique information for that client by the server. The user needs to setup a case on the server, describe computer that is about to be investigated and create a bootable CD, disk image or PXE configuration for this computer. As this OS is very small (about 20Mb) it is easy to send it to a remote location. As the OS contains unique information, the server can identify the OS when it is booted. It can link that instance of the OS with the configured case and computer.\r\n\r\nThe server has by default a webserver for basic case management on port 5556 and a webserver for the clients on port 5555. When accessing the server website it shows the current configured cases.\r\n\r\n![Main Page](images/raqet_MainPage1.png)\r\n\r\nThe case defaultcase is created to handle the situation where users use the same OS multiple times. The client-OS calculates a fingerprint of the hardware and the server uses it to distinguish this unintended and undesirable situation.\r\n\r\n![View Case](images/raqet_CaseView.png)\r\n\r\nThe normal process is to start by making a new case. The case is given a normal name which can be descriptive and contain any characters, but also a path. The path is not allowed to contain any special characters as it will be used as a path in the CIFS export of the data and also in urls of the restfull API of the server.\r\n\r\n![Add Case](images/raqet_AddCase.png)\r\n\r\nAfter adding a case (for example the case Huge case in 2015) it will be added on the main screen of the webinterface.\r\nThe details of the case can be viewed.\r\n\r\n![View after adding a Case](images/raqet_CaseViewAddedCase.png)\r\n\r\nWithin the case a computer can be added. (Field shows wrong captions, sorry). One can set a free format computername, the computername as it will be used as URL and a unique client-id that will be used to link the generated OS to the administrative client.\r\n\r\n![Add computer](images/raqet_AddComputer.png)\r\n\r\nThe case information will now show both the case details as well as the configured computers.\r\n\r\n![Added a computer](images/raqet_ComputerViewAddedComputer.png)\r\n\r\nWhen viewing the details of the configured computer a download button is presented that allows the investigator to download a bootable ISO image. This image is also usable as harddisk image.\r\n\r\n![View Computer](images/raqet_ViewComputer.png)\r\n\r\nSo the user downloads the ISO image.\r\n\r\n![Download ISO](images/raqet_DownloadISO.png)\r\n\r\nThe ISO image is started on the to be acquired system. This assumes the user to have physical control of the system. This control is out of scope of the project bus is assumed to be based on legal warrants that will be required in (almost?) all jurisdictions. When using this tool as a corporate investigator in your own corporate environment things will be legally easier compared to an international warrant issued from one jurisdiction to the other. Point being: this is not hacking nor will this not automatically boot. It requires coordinated cooperation with the party that physically owns the machine.\r\n\r\n![Start Client](images/raqet_StartClient_recol.png)\r\n\r\nWhen the client has booted  it will register at the server. The server will identify the client based on the number embedded in the OS and link the clients disks to a virtual file system that is exported using CIFS. To access the virtual filesystem it needs to be mounted using windows or linux.\r\n\r\n![Mount using SMB using linux or windows](images/raqet_MountCIFS_recol.png)\r\n\r\nThe virtual filesystem will show a directory scheme consisting of the name of the case and the name of the computer.\r\nWithin this directory several files appear, some of which are physical (stored in /var/raqet) and some are virtual.\r\nThe virtual file shows as a raw image with the size and content of the physical disk of the remote computer. The content is however not physically stored on the server but retreived on the fly.\r\n\r\n![Samba share](images/raqet_SambaShareInfo_recol.png)\r\n\r\nWhen data is read  from the virtual file, it is copied and cached on the physical local filesystem. A bitmap is used to register which 64k blocks are retrieved and present and thus are stored locally. E.g. doing a sleuthkit mmls on \r\nthe virtual file will lead to the storage of just the partition table. A sleuthkit fls -r on a partition will store most of the filesystem metadata etc. The local file will contain just the retrieved data. This allows to selectively acquire content, but still maintain benefits like filenames of deleted files, all timestamps. Order of inodes etc. etc.\r\n\r\n![Samba share with sparse file](images/raqet_SambaShareInfoWithPartial_recol.png)\r\n\r\nA simple triage scenario would just retreive /var/log of the remote computers and filesystem metadata. This could be combined with triage based on filesystem metadata (timestamps, sizes, kerwords in filenames). \r\n\r\nThe tools is not specifically intended for full keyword or file hash based triage of the remote disk content, as this will void the benefits of acquiring just a partial image.\r\n\r\n#### Build\r\n\r\nBoth client and server have the ability to create a debian source package. This can be built using the pbuild framework and will result in installable debian packages.\r\n\r\nFeel free to ask for help at info @ raqet.org\r\n\r\n### Disclaimer\r\n\r\nThe project is a proof of concept. It is intended to show the opportunities, risks and performance of an alternative acquisition process.\r\n\r\n### Authors and Contributors\r\n\r\nThe tool is written by the Netherlands Forensic Institute and is available for anyone that is interested. The prime author is R. Schramp (@schramp).\r\n","google":"UA-71157031-1","note":"Don't delete this file! It's used internally to help with page regeneration."}